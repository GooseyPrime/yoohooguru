name: Autopilot CI/CD

permissions:
  contents: read

on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled]

jobs:
  # Check if autopilot should run
  check-autopilot:
    name: Check Autopilot Trigger
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
      has-action-required: ${{ steps.parse-body.outputs.has-action-required }}
      action-required-section: ${{ steps.parse-body.outputs.action-required-section }}
    steps:
      - name: Check for autopilot trigger
        id: check
        run: |
          HAS_LABEL="${{ contains(github.event.pull_request.labels.*.name, 'autopilot') }}"
          HAS_TAG="${{ contains(github.event.pull_request.body, '[AUTOPILOT: ENABLED]') }}"
          
          if [ "$HAS_LABEL" == "true" ] || [ "$HAS_TAG" == "true" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Autopilot enabled for this PR"
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Autopilot not enabled for this PR"
          fi
      
      - name: Parse PR body for ACTION REQUIRED section
        id: parse-body
        if: steps.check.outputs.should-run == 'true'
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          # Check if ACTION REQUIRED section exists
          if echo "$PR_BODY" | grep -q "## \[ACTION REQUIRED:"; then
            echo "has-action-required=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Found ACTION REQUIRED section"
            
            # Extract the section (from [ACTION REQUIRED: to next ## or end)
            SECTION=$(echo "$PR_BODY" | awk '/## \[ACTION REQUIRED:/{flag=1} flag; /^## [^[]/{if(flag && NR>1) exit} flag')
            
            # Escape for GitHub output
            SECTION="${SECTION//'%'/'%25'}"
            SECTION="${SECTION//$'\n'/'%0A'}"
            SECTION="${SECTION//$'\r'/'%0D'}"
            
            echo "action-required-section<<EOF" >> $GITHUB_OUTPUT
            echo "$SECTION" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has-action-required=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No ACTION REQUIRED section found"
          fi

  # Post comment with manual action items
  post-action-comment:
    name: Post Manual Action Comment
    runs-on: ubuntu-latest
    needs: check-autopilot
    if: needs.check-autopilot.outputs.should-run == 'true' && needs.check-autopilot.outputs.has-action-required == 'true'
    # Explicit permissions: write to post comments and add labels, no code checkout
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Post comment
        uses: actions/github-script@v7
        with:
          script: |
            const section = `${{ needs.check-autopilot.outputs.action-required-section }}`;
            
            const comment = `## ‚ö†Ô∏è Manual Configuration Required
            
            This PR requires manual configuration steps before deployment can proceed.
            
            ${section}
            
            **Once complete:**
            - Remove the \`blocked: external-config\` label to resume autopilot deployment
            - The workflow will automatically continue once the label is removed
            
            ---
            *Posted by Autopilot CI/CD*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
      
      - name: Apply blocked label
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['blocked: external-config']
            });

  # Verify build and tests
  verify:
    name: Verify Build & Tests
    runs-on: ubuntu-latest
    needs: check-autopilot
    if: needs.check-autopilot.outputs.should-run == 'true'
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Install backend dependencies
        run: cd backend && npm install

      - name: Lint backend code
        run: cd backend && npm run lint
        continue-on-error: true

      - name: Lint frontend code
        run: cd frontend && npm run lint
        continue-on-error: true

      - name: Run frontend tests
        run: cd frontend && npm run test:ci
        continue-on-error: true

      - name: Run backend tests
        run: cd backend && npm test
        env:
          NODE_ENV: test
          FIREBASE_PROJECT_ID: yoohoo-dev-testing
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
          JWT_SECRET: test-jwt-secret-key-for-ci-cd-testing-only
          STRIPE_SECRET_KEY: sk_test_placeholder
          STRIPE_PUBLISHABLE_KEY: pk_test_placeholder
          STRIPE_WEBHOOK_SECRET: whsec_placeholder
        continue-on-error: true

      - name: Build frontend
        run: cd frontend && npm run build
        env:
          CI: false

  # Frontend preview build
  frontend-preview:
    name: Build Frontend Preview
    runs-on: ubuntu-latest
    needs: [check-autopilot, verify]
    if: needs.check-autopilot.outputs.should-run == 'true'
    # Explicit permissions: write to post comments, read to checkout code
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v6
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Build React app
        run: cd frontend && npm run build
        env:
          CI: false

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-preview-${{ github.event.pull_request.number }}
          path: frontend/dist
          retention-days: 7

      - name: Comment preview info
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üé® Frontend Preview Built
            
            A preview build has been created and uploaded as an artifact.
            
            **Build Details:**
            - Run: ${{ github.run_number }}
            - Commit: \`${{ github.event.pull_request.head.sha }}\`
            - Artifact: \`frontend-preview-${{ github.event.pull_request.number }}\`
            
            *To deploy: Configure Vercel in repository secrets and this will auto-deploy previews*
            
            ---
            *Posted by Autopilot CI/CD*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # Backend health checks
  backend-check:
    name: Backend Health & API Check
    runs-on: ubuntu-latest
    needs: [check-autopilot, verify]
    if: needs.check-autopilot.outputs.should-run == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v6
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm install

      - name: Install Firebase Tools
        run: npm install -g firebase-tools

      - name: Start Firebase Emulators and Backend Server
        run: |
          cd backend
          # Start emulators in background
          firebase emulators:start --only firestore,auth --project=yoohoo-dev-testing &
          EMULATOR_PID=$!
          echo "EMULATOR_PID=$EMULATOR_PID" >> $GITHUB_ENV
          
          # Wait for emulators to be ready
          sleep 15
          
          # Start backend server
          npm start &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          
          # Wait for backend to be ready
          sleep 10
        env:
          NODE_ENV: test
          PORT: 3001
          FIREBASE_PROJECT_ID: yoohoo-dev-testing
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
          JWT_SECRET: test-jwt-secret-key-for-ci-cd-testing-only
          STRIPE_SECRET_KEY: sk_test_placeholder
          STRIPE_PUBLISHABLE_KEY: pk_test_placeholder
          STRIPE_WEBHOOK_SECRET: whsec_placeholder
          SERVE_FRONTEND: false

      - name: Test /health endpoint
        run: |
          echo "Testing /health endpoint..."
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" http://localhost:3001/health)
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | grep -v "HTTP_CODE:")
          
          echo "Response: $BODY"
          echo "HTTP Code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "‚úÖ /health endpoint working"
          else
            echo "‚ùå /health endpoint failed with code $HTTP_CODE"
            exit 1
          fi

      - name: Test /api/skills endpoint
        run: |
          echo "Testing /api/skills endpoint..."
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" http://localhost:3001/api/skills)
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | grep -v "HTTP_CODE:")
          
          echo "Response: $BODY"
          echo "HTTP Code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" == "200" ]; then
            echo "‚úÖ /api/skills endpoint working"
          else
            echo "‚ùå /api/skills endpoint failed with code $HTTP_CODE"
            exit 1
          fi

      - name: Test /api/flags endpoint
        run: |
          echo "Testing /api/flags endpoint..."
          RESPONSE=$(curl -s http://localhost:3001/api/flags)
          echo "Flags response: $RESPONSE"
          
          # Verify it's valid JSON with 'features' key
          if echo "$RESPONSE" | jq -e '.features' > /dev/null 2>&1; then
            echo "‚úÖ /api/flags returns valid JSON with features"
          else
            echo "‚ùå /api/flags response invalid"
            exit 1
          fi

      - name: Stop backend and emulators
        if: always()
        run: |
          echo "Stopping services..."
          pkill -f "node.*backend" || true
          pkill -f "firebase.*emulators" || true
          pkill -f "java.*firestore" || true
          sleep 2

  # Production release (only if not blocked)
  prod-release:
    name: Production Release Gate
    runs-on: ubuntu-latest
    needs: [check-autopilot, verify, frontend-preview, backend-check]
    if: |
      needs.check-autopilot.outputs.should-run == 'true' &&
      !contains(join(github.event.pull_request.labels.*.name, ','), 'blocked: external-config')
    # Explicit permissions: write to post comments, no code checkout needed
    permissions:
      pull-requests: write
    steps:
      - name: Check deployment readiness
        run: |
          echo "‚úÖ All checks passed"
          echo "‚úÖ No blocking labels found"
          echo "üöÄ Ready for production release"
          
      - name: Comment deployment ready
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ‚úÖ Ready for Production Deployment
            
            All autopilot checks have passed:
            - ‚úÖ Build and tests verified
            - ‚úÖ Frontend preview built
            - ‚úÖ Backend health checks passed
            - ‚úÖ No blocking configuration required
            
            **Next Steps:**
            - Merge this PR to deploy to production
            - OR manually trigger deployment workflow
            
            ---
            *Posted by Autopilot CI/CD*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
