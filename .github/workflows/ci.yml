name: YooHoo Guru CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  lint:
    name: Lint Codebase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci # Use 'ci' for faster, deterministic installs

      - name: Run ESLint
        run: npm run lint

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install frontend dependencies
        run: npm ci --workspace=frontend

      - name: Run frontend tests
        run: npm test --workspace=frontend

  test-backend:
    name: Backend Tests (20.x)
    runs-on: ubuntu-latest
    needs: lint
    environment: copilot
    services:
      pass_through:
        image: alpine:latest
        ports:
          - 5432:5432
          - 6379:6379
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install backend dependencies
        run: npm ci --workspace=backend

      - name: Run backend tests
        run: npm test --workspace=backend -- --detectOpenHandles
        env:
          CI: true
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}

  build:
    name: Build Production Artifacts
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install all dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build --workspace=frontend
        env:
          CI: false

      - name: Build backend (if necessary)
        run: echo "Backend build step would go here if needed"

      - name: Upload Frontend Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-server
          path: |
            backend/
            !backend/node_modules/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: staging
      url: https://staging.yoohoo.guru
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-server
          path: backend
      
      - name: Deploy to Staging
        run: echo "Staging deployment steps go here"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: production
      url: https://yoohoo.guru
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-server
          path: backend

      - name: Deploy to Production
        run: echo "Production deployment steps go here"