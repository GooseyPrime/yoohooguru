name: YooHoo Guru CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  lint:
    name: Lint Codebase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm run install:all

      - name: Run ESLint
        run: npm run lint

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'frontend/package.json' # FIX: Point to package.json as lock file is not in repo

      - name: Install frontend dependencies
        run: cd frontend && npm install

      - name: Run frontend tests
        run: cd frontend && npm test

  test-backend:
    name: Backend Tests (20.x)
    runs-on: ubuntu-latest
    needs: lint
    environment: copilot
    services:
      # Future service definitions (e.g., database) can go here
      # redis:
      #   image: redis
      #   ports:
      #     - 6379:6379
      # postgres:
      #   image: postgres
      #   ports:
      #     - 5432:5432
      #   env:
      #     POSTGRES_USER: runner
      #     POSTGRES_DB: test
      #     POSTGRES_PASSWORD: password
      pass_through:
        # Action will only work with a pass-through service for now
        # until the MCP is more fully developed
        # (this is an anti-pattern, but it works for now)
        image: alpine:latest
        ports:
          - 5432:5432
          - 6379:6379
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install backend dependencies
        run: cd backend && npm install

      - name: Run backend tests
        run: cd backend && npm test -- --detectOpenHandles
        env:
          CI: true
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}

  build:
    name: Build Production Artifacts
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install all dependencies
        run: npm run install:all

      - name: Build frontend
        run: cd frontend && npm run build
        env:
          CI: false # Allow warnings without failing build for now

      - name: Build backend (if necessary)
        # Add backend build step here if you have one, e.g., TypeScript compilation
        run: echo "Backend build step would go here if needed"

      - name: Upload Frontend Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-server
          path: |
            backend/
            !backend/node_modules/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: staging
      url: https://staging.yoohoo.guru
    if: github.ref == 'refs/heads/main' # Or your staging branch
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-server
          path: backend

      # Example Deployment Steps (replace with your actual commands)
      - name: Deploy Frontend to Firebase Staging
        run: echo "Deploying frontend to Firebase staging..."
        # uses: FirebaseExtended/action-hosting-deploy@v0
        # with:
        #   repoToken: '${{ secrets.GITHUB_TOKEN }}'
        #   firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}'
        #   channelId: staging
        #   projectId: your-staging-project-id

      - name: Deploy Backend to Railway Staging
        run: echo "Deploying backend to Railway staging..."
        # uses: railwayapp/cli-action@v1
        # with:
        #   railway_token: ${{ secrets.RAILWAY_TOKEN_STAGING }}
        #   service: your-staging-backend-service-name

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: production
      url: https://yoohoo.guru
    if: github.ref == 'refs/heads/master' # Or your main/production branch
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-server
          path: backend

      - name: Deploy Frontend to Firebase Production
        run: echo "Deploying frontend to Firebase production..."
        # uses: FirebaseExtended/action-hosting-deploy@v0
        # with:
        #   repoToken: '${{ secrets.GITHUB_TOKEN }}'
        #   firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}'
        #   channelId: live
        #   projectId: your-production-project-id

      - name: Deploy Backend to Railway Production
        run: echo "Deploying backend to Railway production..."
        # uses: railwayapp/cli-action@v1
        # with:
        #   railway_token: ${{ secrets.RAILWAY_TOKEN_PRODUCTION }}
        #   service: your-production-backend-service-name
