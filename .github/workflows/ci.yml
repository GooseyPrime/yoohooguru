name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install all dependencies
      run: npm run install:all
    
    - name: Lint backend code
      run: cd backend && npm run lint
    
    - name: Run backend tests
      run: cd backend && npm test -- --detectOpenHandles
      env:
        NODE_ENV: test

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install all dependencies
      run: npm run install:all
    
    - name: Lint frontend code
      run: cd frontend && npm run lint
    
    - name: Run frontend tests
      run: cd frontend && npm test -- --watchAll=false
      env:
        CI: true

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install all dependencies
      run: npm run install:all
    
    - name: Build frontend
      run: cd frontend && npm run build
    
    - name: Build backend
      run: cd backend && npm run build

  validate-pr-firebase:
    name: Validate PR Firebase Configuration
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for Firebase Mock Usage in PR
      run: |
        echo "üîç Checking PR for prohibited Firebase mock/emulator usage..."
        
        # Check for actual emulator/mock usage (not just validation checks)
        # Allow validation code that checks for emulator usage but rejects it
        if git grep -l "FIREBASE_EMULATOR_HOST.*=\|USE_MOCKS.*=.*true\|firebase.*emulator.*use\|mock.*firebase.*init" -- '*.js' '*.jsx' '*.ts' '*.tsx' '*.json' ':!*test*' ':!*spec*' ':!.github/*' ':!**/*test*' ':!**/*spec*' || true; then
          echo "‚ùå Found prohibited Firebase emulator/mock configuration in application code"
          echo "   PR validation failed: All Firebase usage must target live projects in deployed environments"
          echo "   Note: Mock usage is allowed in test files, but not in application code"
          exit 1
        fi
        
        # Check for environment variables being set to emulator values in source code
        if git grep -E "(FIREBASE_EMULATOR_HOST|USE_MOCKS).*=.*(localhost|127\.0\.0\.1|true)" -- '*.js' '*.jsx' '*.ts' '*.tsx' ':!*test*' ':!*spec*' ':!.github/*' ':!**/*test*' ':!**/*spec*' || true; then
          echo "‚ùå Found hardcoded emulator/mock configuration in application code"
          echo "   PR validation failed: Emulator configurations must not be hardcoded in application code"
          exit 1
        fi
        
        # Check environment files for demo values
        if grep -r "demo\|test\|mock\|example\|your_.*firebase\|changeme" .env.example || true; then
          echo "‚ö†Ô∏è  Found demo values in .env.example - this is OK for documentation"
        fi
        
        echo "‚úÖ No prohibited Firebase emulator/mock usage found in application code"
        echo "üìã PR Firebase Policy Check Passed"
        echo "   ‚Ä¢ All Firebase configurations must use live projects in preview environments"
        echo "   ‚Ä¢ Emulators and mocks are only permitted in local development and unit tests"
        echo "   ‚Ä¢ Validation code that rejects emulator usage is allowed and encouraged"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [validate-pr-firebase]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install all dependencies
      run: npm run install:all
    
    - name: Run security audit - Backend
      run: cd backend && npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Run security audit - Frontend
      run: cd frontend && npm audit --audit-level=moderate
      continue-on-error: true

  validate-firebase-staging:
    name: Validate Firebase Configuration (Staging)
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Firebase for Staging
      run: ./scripts/validate-firebase-production.sh
      env:
        NODE_ENV: staging
        # These would be set in GitHub Secrets for actual deployment
        FIREBASE_PROJECT_ID: ${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
        FIREBASE_API_KEY: ${{ secrets.STAGING_FIREBASE_API_KEY }}
        FIREBASE_AUTH_DOMAIN: ${{ secrets.STAGING_FIREBASE_AUTH_DOMAIN }}
        FIREBASE_DATABASE_URL: ${{ secrets.STAGING_FIREBASE_DATABASE_URL }}
        FIREBASE_STORAGE_BUCKET: ${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
        FIREBASE_APP_ID: ${{ secrets.STAGING_FIREBASE_APP_ID }}
        REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
        REACT_APP_FIREBASE_API_KEY: ${{ secrets.STAGING_FIREBASE_API_KEY }}
        REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.STAGING_FIREBASE_AUTH_DOMAIN }}
        REACT_APP_FIREBASE_DATABASE_URL: ${{ secrets.STAGING_FIREBASE_DATABASE_URL }}
        REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
        REACT_APP_FIREBASE_APP_ID: ${{ secrets.STAGING_FIREBASE_APP_ID }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate-firebase-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: echo "Deploy to staging environment"
      # Add your staging deployment commands here

  validate-firebase-production:
    name: Validate Firebase Configuration (Production)
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Firebase for Production
      run: ./scripts/validate-firebase-production.sh
      env:
        NODE_ENV: production
        # These would be set in GitHub Secrets for actual deployment
        FIREBASE_PROJECT_ID: ${{ secrets.PRODUCTION_FIREBASE_PROJECT_ID }}
        FIREBASE_API_KEY: ${{ secrets.PRODUCTION_FIREBASE_API_KEY }}
        FIREBASE_AUTH_DOMAIN: ${{ secrets.PRODUCTION_FIREBASE_AUTH_DOMAIN }}
        FIREBASE_DATABASE_URL: ${{ secrets.PRODUCTION_FIREBASE_DATABASE_URL }}
        FIREBASE_STORAGE_BUCKET: ${{ secrets.PRODUCTION_FIREBASE_STORAGE_BUCKET }}
        FIREBASE_APP_ID: ${{ secrets.PRODUCTION_FIREBASE_APP_ID }}
        REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.PRODUCTION_FIREBASE_PROJECT_ID }}
        REACT_APP_FIREBASE_API_KEY: ${{ secrets.PRODUCTION_FIREBASE_API_KEY }}
        REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.PRODUCTION_FIREBASE_AUTH_DOMAIN }}
        REACT_APP_FIREBASE_DATABASE_URL: ${{ secrets.PRODUCTION_FIREBASE_DATABASE_URL }}
        REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.PRODUCTION_FIREBASE_STORAGE_BUCKET }}
        REACT_APP_FIREBASE_APP_ID: ${{ secrets.PRODUCTION_FIREBASE_APP_ID }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-firebase-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: echo "Deploy to production environment"
      # Add your production deployment commands here
